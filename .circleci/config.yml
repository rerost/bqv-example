version: 2
jobs:
  test: 
    docker:
      - image: circleci/golang:1.17
    working_directory: /go/src/github.com/rerost/bqv-example
    steps:
      - checkout
      - run:
          name: "Setting env"
          command: |
            echo "export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/key.json" >> $BASH_ENV
            echo $GCP_KEY > ${HOME}/key.json
      - run:
          name: "Prepare bqv"
          command: |
            go install github.com/rerost/bqv@v0.3.0
      - run:
          name: "test"
          command: |
            bqv alpha test --dir=./example --projectid=${GCP_PROJECT_ID} --debug
            bqv alpha test example/dataset1/example_view1.sql tests/dataset1/example_view1.sql --projectid=${GCP_PROJECT_NAME} --debug

  apply:
    docker:
      - image: circleci/golang:1.17

    working_directory: /go/src/github.com/rerost/bqv-example
    steps:
      - checkout
      - run:
          name: "Setting env"
          command: |
            echo "export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/key.json" >> $BASH_ENV
            echo $GCP_KEY > ${HOME}/key.json
      - run:
          name: "Prepare bqv"
          command: |
            go install github.com/rerost/bqv@v0.3.0
      - run:
          name: "apply"
          command: |
             bqv view apply --dir=./example --projectid=${GCP_PROJECT_ID} --debug
      - run:
          name: "Apply UDF"
          command: |
            bqv alpha query exec $(find udf -name \*.sql) --projectid=${GCP_PROJECT_ID} --debug
      - run:
          name: "test"
          command: |
            bqv alpha test --dir=./example --projectid=${GCP_PROJECT_ID} --debug
            bqv alpha test example/dataset1/example_view1.sql tests/dataset1/example_view1.sql --projectid=${GCP_PROJECT_NAME} --debug
workflows:
  version: 2
  apply:
    jobs:
      - apply:
          context: gcp
          filters:
              branches:
                only: master
      - test
